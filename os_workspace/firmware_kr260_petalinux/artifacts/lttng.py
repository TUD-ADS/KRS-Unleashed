# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
LTTng 2.13.4

The  LTTng  project  aims at providing highly efficient tracing tools for Linux.
It's tracers help tracking down performance issues and debugging problems involving
multiple concurrent processes and threads. Tracing across multiple systems is also possible.
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _lttng
else:
    import _lttng

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
DOMAIN_KERNEL = _lttng.DOMAIN_KERNEL
DOMAIN_UST = _lttng.DOMAIN_UST
BUFFER_PER_PID = _lttng.BUFFER_PER_PID
BUFFER_PER_UID = _lttng.BUFFER_PER_UID
BUFFER_GLOBAL = _lttng.BUFFER_GLOBAL
EVENT_ALL = _lttng.EVENT_ALL
EVENT_TRACEPOINT = _lttng.EVENT_TRACEPOINT
EVENT_PROBE = _lttng.EVENT_PROBE
EVENT_FUNCTION = _lttng.EVENT_FUNCTION
EVENT_FUNCTION_ENTRY = _lttng.EVENT_FUNCTION_ENTRY
EVENT_NOOP = _lttng.EVENT_NOOP
EVENT_SYSCALL = _lttng.EVENT_SYSCALL
EVENT_LOGLEVEL_ALL = _lttng.EVENT_LOGLEVEL_ALL
EVENT_LOGLEVEL_RANGE = _lttng.EVENT_LOGLEVEL_RANGE
EVENT_LOGLEVEL_SINGLE = _lttng.EVENT_LOGLEVEL_SINGLE
LOGLEVEL_EMERG = _lttng.LOGLEVEL_EMERG
LOGLEVEL_ALERT = _lttng.LOGLEVEL_ALERT
LOGLEVEL_CRIT = _lttng.LOGLEVEL_CRIT
LOGLEVEL_ERR = _lttng.LOGLEVEL_ERR
LOGLEVEL_WARNING = _lttng.LOGLEVEL_WARNING
LOGLEVEL_NOTICE = _lttng.LOGLEVEL_NOTICE
LOGLEVEL_INFO = _lttng.LOGLEVEL_INFO
LOGLEVEL_DEBUG_SYSTEM = _lttng.LOGLEVEL_DEBUG_SYSTEM
LOGLEVEL_DEBUG_PROGRAM = _lttng.LOGLEVEL_DEBUG_PROGRAM
LOGLEVEL_DEBUG_PROCESS = _lttng.LOGLEVEL_DEBUG_PROCESS
LOGLEVEL_DEBUG_MODULE = _lttng.LOGLEVEL_DEBUG_MODULE
LOGLEVEL_DEBUG_UNIT = _lttng.LOGLEVEL_DEBUG_UNIT
LOGLEVEL_DEBUG_FUNCTION = _lttng.LOGLEVEL_DEBUG_FUNCTION
LOGLEVEL_DEBUG_LINE = _lttng.LOGLEVEL_DEBUG_LINE
LOGLEVEL_DEBUG = _lttng.LOGLEVEL_DEBUG
EVENT_SPLICE = _lttng.EVENT_SPLICE
EVENT_MMAP = _lttng.EVENT_MMAP
EVENT_CONTEXT_PID = _lttng.EVENT_CONTEXT_PID
EVENT_CONTEXT_PERF_COUNTER = _lttng.EVENT_CONTEXT_PERF_COUNTER
EVENT_CONTEXT_PROCNAME = _lttng.EVENT_CONTEXT_PROCNAME
EVENT_CONTEXT_PRIO = _lttng.EVENT_CONTEXT_PRIO
EVENT_CONTEXT_NICE = _lttng.EVENT_CONTEXT_NICE
EVENT_CONTEXT_VPID = _lttng.EVENT_CONTEXT_VPID
EVENT_CONTEXT_TID = _lttng.EVENT_CONTEXT_TID
EVENT_CONTEXT_VTID = _lttng.EVENT_CONTEXT_VTID
EVENT_CONTEXT_PPID = _lttng.EVENT_CONTEXT_PPID
EVENT_CONTEXT_VPPID = _lttng.EVENT_CONTEXT_VPPID
EVENT_CONTEXT_PTHREAD_ID = _lttng.EVENT_CONTEXT_PTHREAD_ID
EVENT_CONTEXT_HOSTNAME = _lttng.EVENT_CONTEXT_HOSTNAME
EVENT_CONTEXT_IP = _lttng.EVENT_CONTEXT_IP
EVENT_CONTEXT_PERF_CPU_COUNTER = _lttng.EVENT_CONTEXT_PERF_CPU_COUNTER
EVENT_CONTEXT_PERF_THREAD_COUNTER = _lttng.EVENT_CONTEXT_PERF_THREAD_COUNTER
EVENT_CONTEXT_APP_CONTEXT = _lttng.EVENT_CONTEXT_APP_CONTEXT
EVENT_CONTEXT_INTERRUPTIBLE = _lttng.EVENT_CONTEXT_INTERRUPTIBLE
EVENT_CONTEXT_PREEMPTIBLE = _lttng.EVENT_CONTEXT_PREEMPTIBLE
EVENT_CONTEXT_NEED_RESCHEDULE = _lttng.EVENT_CONTEXT_NEED_RESCHEDULE
EVENT_CONTEXT_MIGRATABLE = _lttng.EVENT_CONTEXT_MIGRATABLE

def _lttng_create_handle(session_name, domain):
    return _lttng._lttng_create_handle(session_name, domain)

def _lttng_destroy_handle(handle):
    return _lttng._lttng_destroy_handle(handle)

def _lttng_list_channels(handle):
    return _lttng._lttng_list_channels(handle)

def _lttng_list_events(handle, channel_name):
    return _lttng._lttng_list_events(handle, channel_name)

def _lttng_list_tracepoints(handle):
    return _lttng._lttng_list_tracepoints(handle)

def _lttng_add_context(handle, ctx, event_name, channel_name):
    return _lttng._lttng_add_context(handle, ctx, event_name, channel_name)

def _lttng_enable_event(handle, ev, channel_name):
    return _lttng._lttng_enable_event(handle, ev, channel_name)

def _lttng_enable_channel(handle, chan):
    return _lttng._lttng_enable_channel(handle, chan)

def _lttng_disable_event(handle, name, channel_name):
    return _lttng._lttng_disable_event(handle, name, channel_name)

def _lttng_disable_channel(handle, name):
    return _lttng._lttng_disable_channel(handle, name)

def _lttng_register_consumer(handle, socket_path):
    return _lttng._lttng_register_consumer(handle, socket_path)

def _lttng_list_sessions():
    return _lttng._lttng_list_sessions()

def _lttng_list_domains(session_name):
    return _lttng._lttng_list_domains(session_name)

def create(name, path):
    r"""
    create(str name, str path) -> int

    Create a new recording session using name and path.
    Returns 0 on success or a negative error code.
    """
    return _lttng.create(name, path)

def create_snapshot(name, path):
    r"""
    create_snapshot(str name, str snapshot_url) -> int

    Create a new recording session using name and snapshot_url in snapshot
    mode (flight recorder).
    Returns 0 on success or a negative error code.
    """
    return _lttng.create_snapshot(name, path)

def destroy(name):
    r"""
    destroy(str name) -> int

    Tear down recording session using name.
    Returns 0 on success or a negative error code.
    """
    return _lttng.destroy(name)

def session_daemon_alive():
    r"""
    session_daemon_alive() -> int

    Check if session daemon is alive.
    Return 1 if alive or 0 if not.
    On error returns a negative value.
    """
    return _lttng.session_daemon_alive()

def set_tracing_group(name):
    r"""
    set_tracing_group(str name) -> int

    Sets the tracing_group variable with name.
    This function allocates memory pointed to by tracing_group.
    On success, returns 0, on error, returns -1 (null name) or -ENOMEM.
    """
    return _lttng.set_tracing_group(name)

def strerror(code):
    r"""
    strerror(int code) -> char

    Returns a human readable string describing
    the error code (a negative value).
    """
    return _lttng.strerror(code)

def start(session_name):
    r"""
    start(str session_name) -> int

    Start tracing for all traces of the session.
    Returns size of returned session payload data or a negative error code.
    """
    return _lttng.start(session_name)

def stop(session_name):
    r"""
    stop(str session_name) -> int

    Stop tracing for all traces of the session.
    Returns size of returned session payload data or a negative error code.
    """
    return _lttng.stop(session_name)

def channel_set_default_attr(domain, attr):
    r"""
    channel_set_default_attr(Domain domain, ChannelAttr attr)

    Set default channel attributes.
    If either or both of the arguments are null, attr content is zeroe'd.
    """
    return _lttng.channel_set_default_attr(domain, attr)


def list_sessions():
	"""
	list_sessions() -> dict

	Ask the session daemon for all available sessions.
	Returns a dict of Session instances, the key is the name;
	on error, returns a negative value.
	"""

	ses_list = _lttng_list_sessions()
	if type(ses_list) is int:
		return ses_list

	sessions = {}

	for ses_elements in ses_list:
		ses = Session()
		ses.name = ses_elements[0]
		ses.path = ses_elements[1]
		ses.enabled = ses_elements[2]
		ses.padding = ses_elements[3]

		sessions[ses.name] = ses

	return sessions


def list_domains(session_name):
	"""
	list_domains(str session_name) -> list

	Ask the session daemon for all available domains of a session.
	Returns a list of Domain instances;
	on error, returns a negative value.
	"""

	dom_list = _lttng_list_domains(session_name)
	if type(dom_list) is int:
		return dom_list

	domains = []

	for dom_elements in dom_list:
		dom = Domain()
		dom.type = dom_elements[0]
		dom.buf_type = dom_elements[1]
		dom.paddinf = dom_elements[2]
		dom.attr.pid = dom_elements[3]
		dom.attr.exec_name = dom_elements[4]
		dom.attr.padding = dom_elements[5]

		domains.append(dom)

	return domains


def list_channels(handle):
	"""
	list_channels(Handle handle) -> dict

	Ask the session daemon for all available channels of a session.
	Returns a dict of Channel instances, the key is the name;
	on error, returns a negative value.
	"""

	try:
		chan_list = _lttng_list_channels(handle._h)
	except AttributeError:
		raise TypeError("in method 'list_channels', argument 1 must be a Handle instance")

	if type(chan_list) is int:
		return chan_list

	channels = {}

	for channel_elements in chan_list:
		chan = Channel()
		chan.name = channel_elements[0]
		chan.enabled = channel_elements[1]
		chan.padding = channel_elements[2]
		chan.attr.overwrite = channel_elements[3][0]
		chan.attr.subbuf_size = channel_elements[3][1]
		chan.attr.num_subbuf = channel_elements[3][2]
		chan.attr.switch_timer_interval = channel_elements[3][3]
		chan.attr.read_timer_interval = channel_elements[3][4]
		chan.attr.output = channel_elements[3][5]
		chan.attr.padding = channel_elements[3][6]

		channels[chan.name] = chan

	return channels


def list_events(handle, channel_name):
	"""
	list_events(Handle handle, str channel_name) -> dict

	Ask the session daemon for all available events of a session channel.
	Returns a dict of Event instances, the key is the name;
	on error, returns a negative value.
	"""

	try:
		ev_list = _lttng_list_events(handle._h, channel_name)
	except AttributeError:
		raise TypeError("in method 'list_events', argument 1 must be a Handle instance")

	if type(ev_list) is int:
		return ev_list

	events = {}

	for ev_elements in ev_list:
		ev = Event()
		ev.name = ev_elements[0]
		ev.type = ev_elements[1]
		ev.loglevel_type = ev_elements[2]
		ev.loglevel = ev_elements[3]
		ev.enabled = ev_elements[4]
		ev.pid = ev_elements[5]
		ev.attr.padding = ev_elements[6]
		ev.attr.probe.addr = ev_elements[7][0]
		ev.attr.probe.offset = ev_elements[7][1]
		ev.attr.probe.symbol_name = ev_elements[7][2]
		ev.attr.probe.padding = ev_elements[7][3]
		ev.attr.ftrace.symbol_name = ev_elements[8][0]
		ev.attr.ftrace.padding = ev_elements[8][1]
		ev.attr.padding = ev_elements[9]

		events[ev.name] = ev

	return events


def list_tracepoints(handle):
	"""
	list_tracepoints(Handle handle) -> dict

	Returns a dict of Event instances, the key is the name;
	on error, returns a negative value.
	"""

	try:
		ev_list = _lttng_list_tracepoints(handle._h)
	except AttributeError:
		raise TypeError("in method 'list_tracepoints', argument 1 must be a Handle instance")

	if type(ev_list) is int:
		return ev_list

	events = {}

	for ev_elements in ev_list:
		ev = Event()
		ev.name = ev_elements[0]
		ev.type = ev_elements[1]
		ev.loglevel_type = ev_elements[2]
		ev.loglevel = ev_elements[3]
		ev.enabled = ev_elements[4]
		ev.pid = ev_elements[5]
		ev.attr.padding = ev_elements[6]
		ev.attr.probe.addr = ev_elements[7][0]
		ev.attr.probe.offset = ev_elements[7][1]
		ev.attr.probe.symbol_name = ev_elements[7][2]
		ev.attr.probe.padding = ev_elements[7][3]
		ev.attr.ftrace.symbol_name = ev_elements[8][0]
		ev.attr.ftrace.padding = ev_elements[8][1]
		ev.attr.padding = ev_elements[9]

		events[ev.name] = ev

	return events


def register_consumer(handle, socket_path):
	"""
	register_consumer(Handle handle, str socket_path) -> int

	Register an outside consumer.
	Returns size of returned session payload data or a negative error code.
	"""

	try:
		return _lttng_register_consumer(handle._h, socket_path)
	except AttributeError:
		raise TypeError("in method 'register_consumer', argument 1 must be a Handle instance")


def add_context(handle, event_context, event_name, channel_name):
	"""
	add_context(Handle handle, EventContext ctx,
		    str event_name, str channel_name) -> int

	Add context to event and/or channel.
	If event_name is None, the context is applied to all events of the channel.
	If channel_name is None, a lookup of the event's channel is done.
	If both are None, the context is applied to all events of all channels.
	Returns the size of the returned payload data or a negative error code.
	"""

	try:
		return _lttng_add_context(handle._h, event_context, event_name, channel_name)
	except AttributeError:
		raise TypeError("in method 'add_context', argument 1 must be a Handle instance")


def enable_event(handle, event, channel_name):
	"""
	enable_event(Handle handle, Event event,
		    str channel_name) -> int

	Enable event(s) for a channel.
	If no event name is specified, all events are enabled.
	If no channel name is specified, the default 'channel0' is used.
	Returns size of returned session payload data or a negative error code.
	"""

	try:
		return _lttng_enable_event(handle._h, event, channel_name)
	except AttributeError:
		raise TypeError("in method 'enable_event', argument 1 must be a Handle instance")


def enable_channel(handle, channel):
	"""
	enable_channel(Handle handle, Channel channel -> int

	Enable channel per domain
	Returns size of returned session payload data or a negative error code.
	"""

	try:
		return _lttng_enable_channel(handle._h, channel)
	except AttributeError:
		raise TypeError("in method 'enable_channel', argument 1 must be a Handle instance")


def disable_event(handle, name, channel_name):
	"""
	disable_event(Handle handle, str name, str channel_name) -> int

	Disable event(s) of a channel and domain.
	If no event name is specified, all events are disabled.
	If no channel name is specified, the default 'channel0' is used.
	Returns size of returned session payload data or a negative error code
	"""

	try:
		return _lttng_disable_event(handle._h, name, channel_name)
	except AttributeError:
		raise TypeError("in method 'disable_event', argument 1 must be a Handle instance")


def disable_channel(handle, name):
	"""
	disable_channel(Handle handle, str name) -> int

	All tracing will be stopped for registered events of the channel.
	Returns size of returned session payload data or a negative error code.
	"""

	try:
		return _lttng_disable_channel(handle._h, name)
	except AttributeError:
		raise TypeError("in method 'disable_channel', argument 1 must be a Handle instance")


class Handle:
	"""
	Manages a handle.
	Takes two arguments: (str session_name, Domain domain)
	"""

	__frozen = False

	def __init__(self, session_name, domain):
		if type(session_name) is not str:
			raise TypeError("in method '__init__', argument 2 of type 'str'")
		if type(domain) is not Domain and domain is not None:
			raise TypeError("in method '__init__', argument 3 of type 'lttng.Domain'")

		self._sname = session_name
		if domain is None:
			self._domtype = None
		else:
			self._domtype = domain.type
		self._h = _lttng_create_handle(session_name, domain)
		self.__frozen = True

	def __del__(self):
		_lttng_destroy_handle(self._h)

	def __repr__(self):
		if self._domtype == 1:
			domstr = "DOMAIN_KERNEL"
		elif self._domtype == 2:
			domstr = "DOMAIN_UST"
		else:
			domstr = self._domtype

		return "lttng.Handle; session('{}'), domain.type({})".format(
			self._sname, domstr)

	def __setattr__(self, attr, val):
		if self.__frozen:
			raise NotImplementedError("cannot modify attributes")
		else:
			self.__dict__[attr] = val

class Domain(object):
    r"""Proxy of C lttng_domain struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    type = property(_lttng.Domain_type_get, _lttng.Domain_type_set, doc=r"""type : enum lttng_domain_type""")
    buf_type = property(_lttng.Domain_buf_type_get, _lttng.Domain_buf_type_set, doc=r"""buf_type : enum lttng_buffer_type""")
    padding = property(_lttng.Domain_padding_get, _lttng.Domain_padding_set, doc=r"""padding : a(LTTNG_DOMAIN_PADDING1).char""")
    attr = property(_lttng.Domain_attr_get, doc=r"""attr : lttng_domain_attr""")

    def __repr__(self):
        r"""__repr__(Domain self) -> char *"""
        return _lttng.Domain___repr__(self)

    def __init__(self):
        r"""__init__(Domain self) -> Domain"""
        _lttng.Domain_swiginit(self, _lttng.new_Domain())
    __swig_destroy__ = _lttng.delete_Domain

# Register Domain in _lttng:
_lttng.Domain_swigregister(Domain)

class lttng_domain_attr(object):
    r"""Proxy of C lttng_domain_attr struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pid = property(_lttng.lttng_domain_attr_pid_get, _lttng.lttng_domain_attr_pid_set, doc=r"""pid : pid_t""")
    exec_name = property(_lttng.lttng_domain_attr_exec_name_get, _lttng.lttng_domain_attr_exec_name_set, doc=r"""exec_name : a(NAME_MAX).char""")
    padding = property(_lttng.lttng_domain_attr_padding_get, _lttng.lttng_domain_attr_padding_set, doc=r"""padding : a(LTTNG_DOMAIN_PADDING2).char""")

    def __init__(self):
        r"""__init__(lttng_domain_attr self) -> lttng_domain_attr"""
        _lttng.lttng_domain_attr_swiginit(self, _lttng.new_lttng_domain_attr())
    __swig_destroy__ = _lttng.delete_lttng_domain_attr

# Register lttng_domain_attr in _lttng:
_lttng.lttng_domain_attr_swigregister(lttng_domain_attr)

class EventContext(object):
    r"""Proxy of C lttng_event_context struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    ctx = property(_lttng.EventContext_ctx_get, _lttng.EventContext_ctx_set, doc=r"""ctx : enum lttng_event_context_type""")
    padding = property(_lttng.EventContext_padding_get, _lttng.EventContext_padding_set, doc=r"""padding : a(LTTNG_EVENT_CONTEXT_PADDING1).char""")
    u = property(_lttng.EventContext_u_get, doc=r"""u : lttng_event_context_u""")

    def __repr__(self):
        r"""__repr__(EventContext self) -> char *"""
        return _lttng.EventContext___repr__(self)

    def __init__(self):
        r"""__init__(EventContext self) -> EventContext"""
        _lttng.EventContext_swiginit(self, _lttng.new_EventContext())
    __swig_destroy__ = _lttng.delete_EventContext

# Register EventContext in _lttng:
_lttng.EventContext_swigregister(EventContext)

class lttng_event_context_u(object):
    r"""Proxy of C lttng_event_context_u struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    perf_counter = property(_lttng.lttng_event_context_u_perf_counter_get, _lttng.lttng_event_context_u_perf_counter_set, doc=r"""perf_counter : struct lttng_event_perf_counter_ctx""")
    padding = property(_lttng.lttng_event_context_u_padding_get, _lttng.lttng_event_context_u_padding_set, doc=r"""padding : a(LTTNG_EVENT_CONTEXT_PADDING2).char""")

    def __init__(self):
        r"""__init__(lttng_event_context_u self) -> lttng_event_context_u"""
        _lttng.lttng_event_context_u_swiginit(self, _lttng.new_lttng_event_context_u())
    __swig_destroy__ = _lttng.delete_lttng_event_context_u

# Register lttng_event_context_u in _lttng:
_lttng.lttng_event_context_u_swigregister(lttng_event_context_u)

class lttng_event_probe_attr(object):
    r"""Proxy of C lttng_event_probe_attr struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    addr = property(_lttng.lttng_event_probe_attr_addr_get, _lttng.lttng_event_probe_attr_addr_set, doc=r"""addr : uint64_t""")
    offset = property(_lttng.lttng_event_probe_attr_offset_get, _lttng.lttng_event_probe_attr_offset_set, doc=r"""offset : uint64_t""")
    symbol_name = property(_lttng.lttng_event_probe_attr_symbol_name_get, _lttng.lttng_event_probe_attr_symbol_name_set, doc=r"""symbol_name : a(LTTNG_SYMBOL_NAME_LEN).char""")
    padding = property(_lttng.lttng_event_probe_attr_padding_get, _lttng.lttng_event_probe_attr_padding_set, doc=r"""padding : a(LTTNG_EVENT_PROBE_PADDING1).char""")

    def __init__(self):
        r"""__init__(lttng_event_probe_attr self) -> lttng_event_probe_attr"""
        _lttng.lttng_event_probe_attr_swiginit(self, _lttng.new_lttng_event_probe_attr())
    __swig_destroy__ = _lttng.delete_lttng_event_probe_attr

# Register lttng_event_probe_attr in _lttng:
_lttng.lttng_event_probe_attr_swigregister(lttng_event_probe_attr)

class lttng_event_function_attr(object):
    r"""Proxy of C lttng_event_function_attr struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    symbol_name = property(_lttng.lttng_event_function_attr_symbol_name_get, _lttng.lttng_event_function_attr_symbol_name_set, doc=r"""symbol_name : a(LTTNG_SYMBOL_NAME_LEN).char""")
    padding = property(_lttng.lttng_event_function_attr_padding_get, _lttng.lttng_event_function_attr_padding_set, doc=r"""padding : a(LTTNG_EVENT_FUNCTION_PADDING1).char""")

    def __init__(self):
        r"""__init__(lttng_event_function_attr self) -> lttng_event_function_attr"""
        _lttng.lttng_event_function_attr_swiginit(self, _lttng.new_lttng_event_function_attr())
    __swig_destroy__ = _lttng.delete_lttng_event_function_attr

# Register lttng_event_function_attr in _lttng:
_lttng.lttng_event_function_attr_swigregister(lttng_event_function_attr)

class Event(object):
    r"""Proxy of C lttng_event struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    type = property(_lttng.Event_type_get, _lttng.Event_type_set, doc=r"""type : enum lttng_event_type""")
    name = property(_lttng.Event_name_get, _lttng.Event_name_set, doc=r"""name : a(LTTNG_SYMBOL_NAME_LEN).char""")
    loglevel_type = property(_lttng.Event_loglevel_type_get, _lttng.Event_loglevel_type_set, doc=r"""loglevel_type : enum lttng_loglevel_type""")
    loglevel = property(_lttng.Event_loglevel_get, _lttng.Event_loglevel_set, doc=r"""loglevel : int""")
    enabled = property(_lttng.Event_enabled_get, _lttng.Event_enabled_set, doc=r"""enabled : int32_t""")
    pid = property(_lttng.Event_pid_get, _lttng.Event_pid_set, doc=r"""pid : pid_t""")
    padding = property(_lttng.Event_padding_get, _lttng.Event_padding_set, doc=r"""padding : a(LTTNG_EVENT_PADDING1).char""")
    attr = property(_lttng.Event_attr_get, doc=r"""attr : lttng_event_attr""")

    def __repr__(self):
        r"""__repr__(Event self) -> char *"""
        return _lttng.Event___repr__(self)

    def __init__(self):
        r"""__init__(Event self) -> Event"""
        _lttng.Event_swiginit(self, _lttng.new_Event())
    __swig_destroy__ = _lttng.delete_Event

# Register Event in _lttng:
_lttng.Event_swigregister(Event)

class lttng_event_attr(object):
    r"""Proxy of C lttng_event_attr struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    probe = property(_lttng.lttng_event_attr_probe_get, _lttng.lttng_event_attr_probe_set, doc=r"""probe : struct lttng_event_probe_attr""")
    ftrace = property(_lttng.lttng_event_attr_ftrace_get, _lttng.lttng_event_attr_ftrace_set, doc=r"""ftrace : struct lttng_event_function_attr""")
    padding = property(_lttng.lttng_event_attr_padding_get, _lttng.lttng_event_attr_padding_set, doc=r"""padding : a(LTTNG_EVENT_PADDING2).char""")

    def __init__(self):
        r"""__init__(lttng_event_attr self) -> lttng_event_attr"""
        _lttng.lttng_event_attr_swiginit(self, _lttng.new_lttng_event_attr())
    __swig_destroy__ = _lttng.delete_lttng_event_attr

# Register lttng_event_attr in _lttng:
_lttng.lttng_event_attr_swigregister(lttng_event_attr)

class ChannelAttr(object):
    r"""Proxy of C lttng_channel_attr struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    overwrite = property(_lttng.ChannelAttr_overwrite_get, _lttng.ChannelAttr_overwrite_set, doc=r"""overwrite : int""")
    subbuf_size = property(_lttng.ChannelAttr_subbuf_size_get, _lttng.ChannelAttr_subbuf_size_set, doc=r"""subbuf_size : uint64_t""")
    num_subbuf = property(_lttng.ChannelAttr_num_subbuf_get, _lttng.ChannelAttr_num_subbuf_set, doc=r"""num_subbuf : uint64_t""")
    switch_timer_interval = property(_lttng.ChannelAttr_switch_timer_interval_get, _lttng.ChannelAttr_switch_timer_interval_set, doc=r"""switch_timer_interval : unsigned int""")
    read_timer_interval = property(_lttng.ChannelAttr_read_timer_interval_get, _lttng.ChannelAttr_read_timer_interval_set, doc=r"""read_timer_interval : unsigned int""")
    output = property(_lttng.ChannelAttr_output_get, _lttng.ChannelAttr_output_set, doc=r"""output : enum lttng_event_output""")
    padding = property(_lttng.ChannelAttr_padding_get, _lttng.ChannelAttr_padding_set, doc=r"""padding : a(LTTNG_CHANNEL_ATTR_PADDING1).char""")

    def __repr__(self):
        r"""__repr__(ChannelAttr self) -> char *"""
        return _lttng.ChannelAttr___repr__(self)

    def __init__(self):
        r"""__init__(ChannelAttr self) -> ChannelAttr"""
        _lttng.ChannelAttr_swiginit(self, _lttng.new_ChannelAttr())
    __swig_destroy__ = _lttng.delete_ChannelAttr

# Register ChannelAttr in _lttng:
_lttng.ChannelAttr_swigregister(ChannelAttr)

class Channel(object):
    r"""Proxy of C lttng_channel struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    name = property(_lttng.Channel_name_get, _lttng.Channel_name_set, doc=r"""name : a(LTTNG_SYMBOL_NAME_LEN).char""")
    enabled = property(_lttng.Channel_enabled_get, _lttng.Channel_enabled_set, doc=r"""enabled : uint32_t""")
    attr = property(_lttng.Channel_attr_get, _lttng.Channel_attr_set, doc=r"""attr : struct lttng_channel_attr""")
    padding = property(_lttng.Channel_padding_get, _lttng.Channel_padding_set, doc=r"""padding : a(LTTNG_CHANNEL_PADDING1).char""")

    def __repr__(self):
        r"""__repr__(Channel self) -> char *"""
        return _lttng.Channel___repr__(self)

    def __init__(self):
        r"""__init__(Channel self) -> Channel"""
        _lttng.Channel_swiginit(self, _lttng.new_Channel())
    __swig_destroy__ = _lttng.delete_Channel

# Register Channel in _lttng:
_lttng.Channel_swigregister(Channel)

class Session(object):
    r"""Proxy of C lttng_session struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    name = property(_lttng.Session_name_get, _lttng.Session_name_set, doc=r"""name : a(NAME_MAX).char""")
    path = property(_lttng.Session_path_get, _lttng.Session_path_set, doc=r"""path : a(PATH_MAX).char""")
    enabled = property(_lttng.Session_enabled_get, _lttng.Session_enabled_set, doc=r"""enabled : uint32_t""")
    snapshot_mode = property(_lttng.Session_snapshot_mode_get, _lttng.Session_snapshot_mode_set, doc=r"""snapshot_mode : uint32_t""")
    live_timer_interval = property(_lttng.Session_live_timer_interval_get, _lttng.Session_live_timer_interval_set, doc=r"""live_timer_interval : unsigned int""")
    extended = property(_lttng.Session_extended_get, doc=r"""extended : lttng_session_extended""")

    def __repr__(self):
        r"""__repr__(Session self) -> char *"""
        return _lttng.Session___repr__(self)

    def __init__(self):
        r"""__init__(Session self) -> Session"""
        _lttng.Session_swiginit(self, _lttng.new_Session())
    __swig_destroy__ = _lttng.delete_Session

# Register Session in _lttng:
_lttng.Session_swigregister(Session)

class lttng_session_extended(object):
    r"""Proxy of C lttng_session_extended struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    padding = property(_lttng.lttng_session_extended_padding_get, _lttng.lttng_session_extended_padding_set, doc=r"""padding : a(LTTNG_SESSION_PADDING1).char""")
    ptr = property(_lttng.lttng_session_extended_ptr_get, _lttng.lttng_session_extended_ptr_set, doc=r"""ptr : p.void""")

    def __init__(self):
        r"""__init__(lttng_session_extended self) -> lttng_session_extended"""
        _lttng.lttng_session_extended_swiginit(self, _lttng.new_lttng_session_extended())
    __swig_destroy__ = _lttng.delete_lttng_session_extended

# Register lttng_session_extended in _lttng:
_lttng.lttng_session_extended_swigregister(lttng_session_extended)



